const express = require('express');
const cors = require('cors');
require('dotenv').config();
const mysql = require('mysql2');

const app = express();

// Middleware
app.use(express.json()); // Cho ph√©p x·ª≠ l√Ω JSON
app.use(cors()); // Cho ph√©p CORS

// H√†m k·∫øt n·ªëi MySQL v·ªõi retry logic
const connectWithRetry = async () => {
  try {
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST,
      user: process.env.DB_USER,
      password: process.env.DB_PASSWORD,
      database: process.env.DB_NAME,
    });

    console.log('‚úÖ Connected to MySQL');
    await connection.end();
    return true;
  } catch (err) {
    console.error('‚ùå MySQL connection error:', err);
    return false;
  }
};

// Ki·ªÉm tra k·∫øt n·ªëi MySQL li√™n t·ª•c m·ªói 5 gi√¢y cho ƒë·∫øn khi th√†nh c√¥ng
const checkDbConnection = async () => {
  let connected = false;
  while (!connected) {
    connected = await connectWithRetry();
    if (!connected) {
      console.log('üîÑ Retrying in 5 seconds...');
      await new Promise(resolve => setTimeout(resolve, 5000)); // Ch·ªù 5 gi√¢y
    }
  }
  // Sau khi k·∫øt n·ªëi th√†nh c√¥ng, kh·ªüi ƒë·ªông server
  startServer();
};

// H√†m ƒë·ªÉ start server sau khi MySQL s·∫µn s√†ng
const startServer = () => {
  const PORT = process.env.PORT || 5000;
  app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
  });
};

// Ki·ªÉm tra k·∫øt n·ªëi v√† start server
checkDbConnection();
